schema {
  query: Queries
  mutation: Mutations
}

enum Role {
  ROOT
}

enum TagType {
  PREFIX
  POSTFIX
}

directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @authorized on FIELD_DEFINITION

type Queries {
  users: [User!]! @hasRole(role: ROOT)
  roles(username: String): [String!]! @hasRole(role: ROOT)
  permissions(role: String, username: String): [RolePermission!]! @hasRole(role: ROOT)
  tags(type: TagType!): [Tag!]!
  get(key: String!): [KeyValue!]! @authorized
}

type Mutations {
  initialize: InitializeResult!
  addRole(name: String!): Boolean! @hasRole(role: ROOT)
  deleteRole(name: String!): Boolean! @hasRole(role: ROOT)
  assignRoleToUser(username: String!, role: String!): Boolean! @hasRole(role: ROOT)
  revokeRoleFromUser(username: String!, role: String!): Boolean! @hasRole(role: ROOT)
  changeUserRoles(username: String!, roles: [String!]!): Boolean! @hasRole(role: ROOT)
  addUser(data: AddUserInput!): AddUserResult! @hasRole(role: ROOT)
  deleteUser(username: String!): Boolean! @hasRole(role: ROOT)
  resetPassword(username: String!): String! @hasRole(role: ROOT)
  grantPermission(data: GrantPermissionInput!): Boolean! @hasRole(role: ROOT)
  revokePermission(data: RevokePermissionInput!): Boolean! @hasRole(role: ROOT)
  addTag(data: TagInput!): Boolean! @hasRole(role: ROOT)
  deleteTag(key: String!, type: TagType!): Boolean! @hasRole(role: ROOT)
  login(username: String!, password: String!): LoginResult!
  changePassword(data: ChangePasswordInput!): Boolean! @authorized
  logout: Boolean!
  put(data: PutInput!): PutResult! @authorized
}

type User {
  username: String!
  roles: [String!]!
}

type KeyValue {
  key: String!
  value: String!
}

type InitializeResult {
  rootPassword: String!
  adminPassword: String!
}

input AddUserInput {
  username: String!
  password: String
  roles: [String]!
}

type AddUserResult {
  password: String!
}

type RolePermission {
  key: String!
  rangeEnd: String!
  read: Boolean!
  write: Boolean!
}

input GrantPermissionInput {
  role: String!
  key: String!
  rangeEnd: String!
  read: Boolean!
  write: Boolean!
}

input RevokePermissionInput {
  role: String!
  key: String!
  rangeEnd: String!
}

type LoginResult {
  username: String!
  roles: [String!]!
  permissions: [RolePermission!]!
}

input ChangePasswordInput {
  oldPassword: String!
  password: String!
}

input PutInput {
  key: String!
  value: String!
  ttl: Int
}

type PutResult {
  revision: Int!
  leaseId: Int
}

type Tag {
  key: String!
  name: String!
}

input TagInput {
  key: String!
  name: String!
  type: TagType!
}
